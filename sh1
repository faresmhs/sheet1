public class MySpecialArrayUtils {
    public static void reverse(int[] arr) {
        for (int j = 0; j < arr.length / 2; j++) {
            int temp = arr[j];
            arr[j] = arr[arr.length - j - 1];
            arr[arr.length - j - 1] = temp;
        }
    }
    public static int[] sumEvenOdd(int[] arr){
        int sumEvenOdd[] = new int[2];
        for (int p=0;p<arr.length;p++){
            if(arr[p]%2==0){
                sumEvenOdd[0]+=arr[p];
            }else{
                sumEvenOdd[1]+=arr[p];
            }
        }
        return sumEvenOdd;
    }
    public static double average(int[] arr){
        double average=0;
        for(int w=0;w<arr.length;w++){
            average=average+((double)arr[w]/arr.length) ;
        }
        return average;
    }
    public static void moveValue(int[] arr, int val){
        int c =0;
        for (int q = 0; q < arr.length; q++) {
            if(arr[q]!=val){
                arr[c]=arr[q];
                c++;
            }
        }
        while(c<arr.length){
            arr[c]=val;
            c++;
        }
    }
    public static int[][] transpose(int[][] arr){
        for (int i=0;i<arr.length;i++){
            for (int j=0;j<arr[i].length;j++){
                transpose()[i][j]=arr[j][i];
            }
        }
    }
    public static BigInteger fibonacci(int n){
        BigInteger t1 = BigInteger.ZERO ;
        BigInteger t2 = BigInteger.ONE;
        BigInteger sum = BigInteger.ZERO;
        if (n==1) {
            return BigInteger.ZERO;
        }if (n==2) {
            return BigInteger.ONE;
        }else{
            for (int i=2;i<n;i++){
                sum = t1.add(t2);
                t1 = t2;
                t2 = sum;
            }
            return sum;
        }
    }
}
